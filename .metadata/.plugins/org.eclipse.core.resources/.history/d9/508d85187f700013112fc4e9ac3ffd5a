package cs.kuleuven.util

import cs.kuleuven.matrix.DenseMatrix
import oscar.cp.core._

/**
 * Created on December 27, 2013
 * @author thanhle
 */

class PotentialRegion(rows: IndexedSeq[CPVarBool], 
						cols:IndexedSeq[CPVarBool], 
						binTdb: DenseMatrix) {
  
  	val posCols = (0 until cols.size).filter(c => (cols(c).isBound && cols(c).getValue == 1))
	val posRows = (0 until rows.size).filter(r => !(rows(r).isBound && rows(r).getValue == 0)).toArray
	val colDens = (0 until posCols.size).map(c => 1.0*colSum(c, posRows, binTdb)/posRows.length)
	
	def colSum(col: Int, rows: Array[Int], binTdb: DenseMatrix): Int = {
  	  var total = 0
  	  for(row <- rows) {
  	    total += binTdb.at(row, col)
  	  }
  	  return total
  	}
	
}